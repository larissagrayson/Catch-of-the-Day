{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","transitionOptions","classNames","timeout","enter","exit","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","updatedFish","updateFish","index","onChange","deleteFish","Login","authenticate","firebase","require","firebaseApp","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","console","log","post","data","user","setState","provider","authProvider","auth","OAuthProvider","signInWithPopup","then","logout","signOut","onAuthStateChanged","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","details","src","alt","disabled","addToOrder","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","JSON","parse","syncState","setItem","stringify","removeBinding","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.9000d151.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getFunName } from '../helpers';\n\nclass StorePicker extends React.Component{\n    myInput = React.createRef();  // Create an empty ref\n\n    static propTypes = {\n        history: PropTypes.object\n    }\n\n    goToStore = (event) => {\n        // 1. Stop the form from submitting\n        event.preventDefault();\n        // 2. Get the text from the input\n        const storeName = this.myInput.current.value;\n        // 3. Change the page to /store/input-provided\n        this.props.history.push(`/store/${storeName}`);\n    }\n\n    render() {\n        return (\n            <form className = \"store-selector\" onSubmit={this.goToStore}>\n                <h2>Please Enter A Store</h2>\n                <input \n                    type = \"text\" \n                    ref = {this.myInput}\n                    required \n                    placeholder=\"Store Name\" \n                    defaultValue={getFunName()} \n                />\n                <button type = \"submit\">Visit Store</button>\n            </form>\n        );\n    }\n}\n\nexport default StorePicker;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => (\n    <header className=\"top\">\n        <h1>Catch \n        <span className=\"ofThe\">\n                <span className=\"of\">Of</span>\n                <span className=\"the\">The</span>\n            </span> \n            Day\n        </h1>\n        <h3 className=\"tagline\">\n            <span>{props.tagline}</span>\n        </h3>\n    </header>\n);\n\nHeader.propTypes = {\n    tagline: PropTypes.string.isRequired\n};\n\n/*\nclass Header extends React.Component {\n    render(){\n        return (\n            <header className=\"top\">\n                <h1>Catch \n                   <span className=\"ofThe\">\n                        <span className=\"of\">Of</span>\n                        <span className=\"the\">The</span>\n                    </span> \n                    Day\n                </h1>\n                <h3 className=\"tagline\">\n                    <span>{this.props.tagline}</span>\n                </h3>\n            </header>\n        );\n\n    }\n\n}*/\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatPrice } from '../helpers';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nclass Order extends React.Component {\n    static propTypes = {\n        fishes: PropTypes.object,\n        order: PropTypes.object,\n        removeFromOrder: PropTypes.func\n    };\n    \n    renderOrder = (key) => {\n        const fish = this.props.fishes[key];\n        const count = this.props.order[key];\n        const isAvailable = fish && fish.status === 'available';\n        const transitionOptions = {\n            classNames: \"order\", \n            key,\n            timeout: { enter:500, exit: 500 }\n        };\n\n        // Make sure the fish is loaded from db before we continue\n        if(!fish) return null; // will render nothing\n\n        if(!isAvailable){\n           return (\n                <CSSTransition {...transitionOptions }>\n                    <li key={key}> \n                        Sorry {fish ? fish.name : 'fish'} is no longer available \n                    </li>\n                </CSSTransition>\n           );\n        }\n        return (\n            <CSSTransition {...transitionOptions }>\n                <li key={key}>\n                    <span>\n                        <TransitionGroup component=\"span\" className=\"count\">\n                            <CSSTransition classNames=\"count\" key={count} timeout={{ enter:500, exit: 500}}>\n                                <span>{count}</span>\n                            </CSSTransition>\n                        </TransitionGroup>\n                        lbs {fish.name}\n                        {formatPrice(count * fish.price)}\n                        <button onClick={()=> this.props.removeFromOrder(key)}>&times;</button>\n                    </span>\n                </li>\n            </CSSTransition>\n        );\n    };\n    render(){\n        // 1. Tally up the total of the order\n        const orderIds = Object.keys(this.props.order);\n        const total = orderIds.reduce((prevTotal, key) => {\n            const fish = this.props.fishes[key];\n            const count = this.props.order[key];\n            const isAvailable = fish && fish.status === 'available';\n            if(isAvailable){\n                return prevTotal + (count * fish.price);\n            }\n            return prevTotal;\n        }, 0);\n\n        return (\n            <div className=\"order-wrap\">\n                <h2>Order</h2>\n                <TransitionGroup component=\"ul\" className=\"order\">\n                    {orderIds.map(this.renderOrder)}\n                </TransitionGroup>\n\n                <div className=\"total\">\n                    Total:\n                    <strong>{formatPrice(total)}</strong>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Order;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddFishForm extends React.Component {\n    nameRef = React.createRef();\n    priceRef = React.createRef();\n    statusRef = React.createRef();\n    descRef = React.createRef();\n    imageRef = React.createRef();\n\n    static propTypes = {\n        addFish: PropTypes.func,\n    };\n\n    createFish = (event) => {\n        //1. Stop the form from submitting\n        event.preventDefault();\n       \n        //2. Take the form data and create a new fish object\n        const fish = {\n            name: this.nameRef.current.value,\n            price: parseFloat(this.priceRef.current.value),\n            status: this.statusRef.current.value,\n            desc: this.descRef.current.value,\n            image: this.imageRef.current.value,\n        };\n\n        // Pass it back up to App to save in state\n        this.props.addFish(fish);\n        // Refresh the form\n        event.currentTarget.reset();\n    };\n\n    render(){\n        return (\n            <form className=\"fish-edit\" onSubmit={this.createFish}>\n                <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\n                <input name=\"price\" ref={this.priceRef} type=\"text\" placeholder=\"Price\" />\n                <select name=\"status\" ref={this.statusRef} >\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>     \n                </select>\n\n                <textarea name=\"desc\" ref={this.descRef} placeholder=\"Desc\"></textarea>\n                <input name =\"image\" ref={this.imageRef}  type=\"text\" placeholder=\"Image\" />\n                <button type=\"submit\">+ Add Fish</button>\n            </form>\n        );\n    }\n}\n\nexport default AddFishForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EditFishForm extends React.Component{\n    static propTypes = {\n        fish: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            desc: PropTypes.string,\n            status: PropTypes.string,\n            price: PropTypes.number,\n        }),\n        index: PropTypes.string,\n        updateFish: PropTypes.func,\n    };\n    \n    handleChange = (event) => {\n        // Update that fish\n        // 1. Take a copy of the current fish\n        const updatedFish = {\n            ...this.props.fish,\n            [event.currentTarget.name]: event.currentTarget.value\n        };\n        // 2. Update state\n        this.props.updateFish(this.props.index, updatedFish);\n    }\n    render(){\n        return (\n            <div className=\"fish-edit\">\n                <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.props.fish.name}/>\n                <input type=\"text\" name=\"price\" onChange={this.handleChange} value={this.props.fish.price} />\n                <select name=\"status\" onChange={this.handleChange} value={this.props.fish.status}>\n                    <option value=\"available\">Fresh!</option>\n                    <option value=\"unavailable\">Sold Out!</option>   \n                </select>\n                <textarea name=\"desc\" onChange={this.handleChange} value={this.props.fish.desc}></textarea>\n                <input type=\"text\" name=\"image\" onChange={this.handleChange} value={this.props.fish.image} />\n                <button onClick={() => this.props.deleteFish(this.props.index)}>Remove Fish</button>\n            </div> \n        );\n    };\n}\n\nexport default EditFishForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Login = (props) => (\n   <nav className=\"login\">\n       <h2>Inventory Login</h2>\n       <p>Sign in to manage your store's inventory</p>\n       <button className=\"github\" onClick={() => props.authenticate('Github')}>Log In With GitHub</button>\n      {/*} <button className=\"twitter\" onClick={() => props.authenticate('Twitter')}>Log In With Twitter</button>\n       <button className=\"facebook\" onClick={() => props.authenticate('Facebook')}>Log In With Facebook</button> */}\n       <button className=\"yahoo\" onClick={() => props.authenticate('Yahoo')}>Log In With Yahoo</button>\n       <button className=\"google\" onClick={() => props.authenticate('Google')}>Log In With Google</button>\n   </nav>\n);\n\nLogin.propTypes = {\n    authenticate: PropTypes.func.isRequired\n};\n\nexport default Login;","import Rebase from 're-base';\n//import firebase from 'firebase';\nconst firebase = require('firebase/app');\nrequire('firebase/auth');\nrequire('firebase/database');\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyCPUfi6SbUKo4wOtq1b_NceFz80CIZ8mWY\",\n    authDomain: \"catch-of-the-day-lgrayson.firebaseapp.com\",\n    databaseURL: \"https://catch-of-the-day-lgrayson-default-rtdb.firebaseio.com\",\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// This is a default export\nexport default base;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport Login from './Login';\nimport base, { firebaseApp } from '../base';\n//import firebase from 'firebase/app'; import 'firebase/auth';\n\n\nclass Inventory extends React.Component {\n    static propTypes = {\n        fishes: PropTypes.object,\n        updateFish: PropTypes.func,\n        deleteFish: PropTypes.func,\n        addFish: PropTypes.func,\n        loadSampleFishes: PropTypes.func,\n    };\n\n    state = {\n        uid: null,\n        owner: null\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            if(user){\n                this.authHandler({ user });\n            }\n        });\n    }\n\n    authHandler = async (authData) => {\n        // 1. Look up the current store in the firebase database\n        const store = await base.fetch(this.props.storeId, { context: this });\n        console.log(store);\n        // 2. Claim it if there is no owner\n        if(!store.owner) {\n            // save it as our own\n            await base.post(`${this.props.storeId}/owner`, { \n                data: authData.user.uid\n            });\n        }\n        // 3. Set the state of the inventory component to reflect the current user\n        this.setState({\n            uid: authData.user.uid,\n            owner: store.owner || authData.user.uid\n        });\n        console.log(authData);\n    };\n\n    authenticate = (provider) => {\n        let authProvider;\n        if(provider === 'Yahoo'){\n          authProvider = new firebase.auth.OAuthProvider('yahoo.com');\n        }\n        else {\n            authProvider = new firebase.auth[`${provider}AuthProvider`]();\n        }\n        \n        firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler);\n    };\n\n    logout = async () => {\n        console.log('Logging out!');\n        await firebase.auth().signOut();\n        this.setState({ uid: null });\n    }\n\n    render(){\n        const logout = <button onClick={this.logout}>Log Out!</button>\n\n        // 1. Check if user is logged in\n        if (!this.state.uid){\n            return <Login authenticate={this.authenticate} />;\n        }\n        // 2. Check if user is not the owner of the store\n        if(this.state.uid !== this.state.owner){\n            return (\n             <div>\n                <p>Sorry you are not the owner!</p>\n                {logout}\n            </div>\n            );\n        }\n        // 3. They must be the owner, just render the inventory\n        return (\n            <div className=\"inventory\">\n                <h2>Inventory</h2>\n                {logout}\n                {Object.keys(this.props.fishes).map(key => <EditFishForm \n                    key={key} \n                    index={key} \n                    fish={this.props.fishes[key]} \n                    updateFish={this.props.updateFish} deleteFish={this.props.deleteFish}\n                />)}\n                <AddFishForm addFish={this.props.addFish}/>\n                <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\n            </div>\n        );\n    }\n}\n\nexport default Inventory;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatPrice } from '../helpers';\n\nclass Fish extends React.Component {\n    static propTypes = {\n        details: PropTypes.shape({\n            image: PropTypes.string,\n            name: PropTypes.string,\n            desc: PropTypes.string,\n            status: PropTypes.string,\n            price: PropTypes.number,\n        }),\n        addToOrder: PropTypes.func,\n    }\n    render(){\n        const {image, name, price, desc, status} = this.props.details; // ES6 destructuring\n        const isAvailable = status === 'available';\n    \n        return (\n            <li className=\"menu-fish\">\n                <img src={image} alt={name} />\n                <h3 className=\"fish-name\">{name}\n                    <span className=\"price\">{formatPrice(price)}</span>\n                </h3>\n                <p>{desc}</p>\n                <button disabled={!isAvailable} onClick={() =>this.props.addToOrder(this.props.index)}>{isAvailable ? 'Add To Order' : 'Sold Out!'}</button>\n            </li>\n        );\n    }\n}\n\nexport default Fish;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Header from \"./Header\";\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from '../base';\n\nclass App extends React.Component{\n    // Empty/initial state\n    state = {\n        fishes: {},\n        order: {}\n    };\n\n    static propTypes = {\n        match: PropTypes.object\n    };\n\n    componentDidMount(){\n        const { params } = this.props.match;\n        // 1. Reinstate our localStorage\n        const localStorageRef = localStorage.getItem(params.storeId);\n        // 2. Set localStorageRef to state\n        if(localStorageRef){\n            this.setState({ order: JSON.parse(localStorageRef)})\n        }\n        // Store the reference to the database\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    }\n\n    componentDidUpdate(){\n        localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n    }\n\n    componentWillUnmount() {\n       base.removeBinding(this.ref);\n    }\n\n    addFish = (fish) => {\n        // 1. Take a copy of the existing state\n        const fishes = {...this.state.fishes};\n        // 2. Add our new fish to that fishes variable\n        fishes[`fish${Date.now()}`] = fish;\n        // 3. Set the new fishes object to state\n        this.setState({\n            fishes: fishes\n        });\n    }\n\n    updateFish = (key, updatedFish) => {\n        // 1. Take a copy of the current state\n        const fishes = {...this.state.fishes};\n        // 2. Update that statte\n        fishes[key] = updatedFish;\n        // 3. Set that to state\n        this.setState({ fishes: fishes});\n    }\n\n    deleteFish = (key) => {\n        // 1. Take a copy of state\n        const fishes = {...this.state.fishes};\n        // 2. Delete the fish\n        fishes[key] = null;  // Needed because updating firebase too\n        // 3. Update the state\n        this.setState({ fishes });\n    }\n\n    loadSampleFishes = () => {\n        this.setState({ fishes: sampleFishes });\n    }\n\n    addToOrder = (key) => {\n        // 1. Take a copy of state\n        const order = {...this.state.order};\n        // 2. Either add to the order, or update the number in our order\n        order[key] = order[key] + 1 || 1;\n        // 3. Call setState to update our state object\n        this.setState({ order: order });\n    };\n\n    removeFromOrder = (key) => {\n        // 1. Take a copy of state\n        const order = {...this.state.order};\n        // 2. Remove from order\n        delete order[key]  // Because not saving to firebase\n        // 3. Update the state\n        this.setState({ order });\n    };\n\n    render(){\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Fresh Seafood Market\"/>\n                    <ul className=\"fishes\">\n                        {Object.keys(this.state.fishes).map(key => \n                            <Fish \n                                key={key}\n                                index={key}\n                                details={this.state.fishes[key]} \n                                addToOrder={this.addToOrder} \n                            />)}\n                    </ul>    \n                </div>\n                <Order \n                    fishes={this.state.fishes} \n                    order={this.state.order} \n                    removeFromOrder={this.removeFromOrder}\n                />\n                <Inventory \n                    addFish={this.addFish}\n                    updateFish={this.updateFish}\n                    deleteFish={this.deleteFish}\n                    loadSampleFishes={this.loadSampleFishes}\n                    fishes={this.state.fishes} \n                    storeId={this.props.match.params.storeId}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\n\nconst NotFound = () => (\n    <div>\n        <h2>Not Found!!!</h2>\n    </div>\n);\n\nexport default NotFound;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport StorePicker from './StorePicker';\nimport App from './App';\nimport NotFound from './NotFound';\n\n\n// STATELESS FUNCTIONAL COMPONENT EXAMPLE\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={ StorePicker } />\n            <Route path=\"/store/:storeId\" component={ App } />\n            <Route component={ NotFound } />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","import React from 'react';\nimport { render } from 'react-dom';\nimport Router from './components/Router';\nimport './css/style.css'\n\n\nrender(<Router />, document.querySelector('#main'));"],"sourceRoot":""}